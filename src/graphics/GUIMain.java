package graphics;

import Service.Constants;
import Service.Main;
import Service.ProcessService;
import Service.VirusTotalService;
import bean.AnalysisObject;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Map;

public class GUIMain {
    public int width = 600;
    public int height = 640;
    public int offset = 15;
    JLabel directoryLabel = null;
    JButton directoryButton = null;
    JButton scanButton = null;
    JButton watchButton = null;
    JTextPane textPane = null;
    JButton sendButton = null;
    ArrayList<NodeItem> nodeItems = new ArrayList<>();
    public GUIMain() {
        JFrame frame = new JFrame("PDF Malware Detection");
        frame.setSize(this.width, this.height);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        this.initChooseFolder(panel);
        placeComponent(panel);
        this.initTextArea(panel);
        frame.add(panel);
        frame.setVisible(true);

    }

    private void initChooseFolder(JPanel panel) {
        this.directoryLabel = new JLabel();
        Border blackLine = BorderFactory.createLineBorder(Color.BLACK);
        this.directoryLabel.setBorder(blackLine);
        panel.add(this.directoryLabel, BorderLayout.CENTER);
        directoryLabel.setBounds(offset, height * 3 / 5 + 25, width * 1 / 2 + 50, 50);
        this.updateLabel();
        directoryLabel.setVisible(true);

        int buttonWidth = 125;
        int buttonHeight = 50;
        directoryButton = new JButton("Choose Folder");
        directoryButton.setBounds(directoryLabel.getX() + directoryLabel.getWidth() + 20, directoryLabel.getY(),
                buttonWidth, buttonHeight);
        panel.add(directoryButton, "Center");
        CustomJFileChooser chooser = new CustomJFileChooser(this);
        panel.add(chooser, "Center");
//        frame.setSize(panel.getPreferredSize());
        panel.setVisible(true);
        directoryButton.addActionListener(chooser);
    }

    public void updateLabel() {
        System.out.println("update label" + Constants.watchPath);
        if (this.directoryLabel != null) {
            this.directoryLabel.setText("   " + Constants.watchPath);
        }
    }

    private void placeComponent(JPanel panel) {
        int scanWidth = 100;
        int scanHeight = 50;
        int buttonPadding = 100;
        int buttonOffset = (width - scanWidth * 2 - buttonPadding) / 2;
        scanButton = new JButton("Scan");
        scanButton.setBounds(width - buttonOffset - scanWidth * 2 - buttonPadding,
                height - scanHeight * 2, scanWidth, scanHeight);
        panel.add(scanButton);

        scanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Main.runClassifier(Service.Constants.pythonPath +Service.Constants.classifierProgram, Service.Constants.watchPath);
            }
        });

        sendButton = new JButton("Send");
        sendButton.setBounds(scanButton.getX() + buttonPadding + scanButton.getWidth(), height - scanHeight * 2, scanWidth, scanHeight);
        panel.add(sendButton);
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String sha256 = ProcessService.getSHA256Code(Constants.watchPath);
                VirusTotalService.searchFile(sha256);
            }
        });
        this.placeAnalysisLabels();
    }

    private void placeAnalysisLabels() {
        int startY = this.height / 2 - 150;

    }

    private void initTextArea(JPanel panel) {
        textPane = new JTextPane();
        JScrollPane scrollPane = new JScrollPane(textPane);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
//        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        panel.add(scrollPane);
//        textPane.setEditable(false);
//        panel.add(textArea);
        scrollPane.setBounds(offset, offset, this.width - offset * 2, this.height * 3/5);
    }

    public void addLog(String text) {
        System.out.println(text);
        if (textPane == null) return;
        this.addLog(text, Color.BLACK, true);
    }

    public void addLog(String text, Color c, boolean endLine)
    {
        if (textPane == null) return;
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet attr = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        attr = sc.addAttribute(attr, StyleConstants.FontFamily, "Lucida Console");
        attr = sc.addAttribute(attr, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = textPane.getDocument().getLength();
        textPane.setCaretPosition(len);
        textPane.setCharacterAttributes(attr, false);
        if (endLine) {
            textPane.replaceSelection("\n" + text);
        } else {
            textPane.replaceSelection(text);
        }
    }

    public void addStatics(AnalysisObject analysisObject) {
        this.addLog("\n---------- RECEIVE RESPONSE FROM VIRUSTOTAL ----------\n", Color.BLUE, true);
        Map<String, Object> map = analysisObject.map;
        for (String key : map.keySet()) {
            this.addLog(key + ": ", Color.RED, true);
            this.addLog(map.get(key).toString(), Color.BLACK, false);
        }
    }
}
