package Service;

import graphics.GUIMain;

import java.io.IOException;
import java.nio.file.*;

import static java.nio.file.LinkOption.NOFOLLOW_LINKS;
import static java.nio.file.StandardWatchEventKinds.*;


public class Main {
    public static GUIMain gui;
    public static void main(String[] args) {

//        Service.Main.watchDirectoryPath(Paths.get(Service.Constants.watchPath));
//        Service.Main.runClassifier(Service.Constants.pythonPath +Service.Constants.classifierProgram, Service.Constants.watchPath);
//        Service.Main.runPredict();
        gui = new GUIMain();
    }

    public static void runClassifier(String path, String watchPath) {
        try {
            Process p = Runtime.getRuntime().exec("python " + path + " " + Constants.pythonPath +  " " + watchPath);
            CommandService.getInstance().logOutput(p.getInputStream());
            CommandService.getInstance().logOutput(p.getErrorStream());
            p.waitFor();
            Main.runPredict();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void runPredict() {
        try {
            String modelPath = Constants.pythonPath + Constants.modelProgram;
            Process p = Runtime.getRuntime().exec("python " + modelPath + " " + Constants.pythonPath);
            CommandService.getInstance().logOutput(p.getInputStream());
            CommandService.getInstance().logOutput(p.getErrorStream());
            p.waitFor();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    public static void watchDirectoryPath(Path path) {
        // Sanity check - Check if path is a folder
        try {
            Boolean isFolder = (Boolean) Files.getAttribute(path,
                    "basic:isDirectory", NOFOLLOW_LINKS);
            if (!isFolder) {
                throw new IllegalArgumentException("Path: " + path
                        + " is not a folder");
            }
        } catch (IOException ioe) {
            // Folder does not exists
            ioe.printStackTrace();
        }

        System.out.println("Watching path: " + path);

        // We obtain the file system of the Path
        FileSystem fs = path.getFileSystem();

        // We create the new WatchService using the new try() block
        try (WatchService service = fs.newWatchService()) {

            // We register the path to the service
            // We watch for creation events
            path.register(service, ENTRY_CREATE, ENTRY_MODIFY, ENTRY_DELETE);

            // Start the infinite polling loop
            WatchKey key = null;
            while (true) {
                key = service.take();

                // Dequeueing events
                WatchEvent.Kind<?> kind = null;
                for (WatchEvent<?> watchEvent : key.pollEvents()) {
                    // Get the type of the event
                    kind = watchEvent.kind();
                    if (OVERFLOW == kind) {
                        continue; // loop
                    } else if (ENTRY_CREATE == kind) {
                        // A new Path was created
                        Path newPath = ((WatchEvent<Path>) watchEvent)
                                .context();
                        // Output
                        System.out.println("New path created: " + newPath);
                    } else if (ENTRY_MODIFY == kind) {
                        // modified
                        Path newPath = ((WatchEvent<Path>) watchEvent)
                                .context();
                        // Output
                        System.out.println("New path modified: " + newPath);
                    } else if (ENTRY_DELETE == kind) {
                        Path newPath = ((WatchEvent<Path>) watchEvent)
                                .context();
                        // Output
                        System.out.println("New path delete: " + newPath);
                    }
                }

                if (!key.reset()) {
                    break; // loop
                }
            }

        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }

    }}
