package Service;

import java.awt.*;
import java.io.File;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class CommandService {
    private static SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss:SSS");
    private static CommandService instance;
    public void logOutput(InputStream inputStream) {
        new Thread(() -> {
            Scanner scanner = new Scanner(inputStream, StandardCharsets.UTF_8);
            while (scanner.hasNextLine()) {
                synchronized (this) {
                    String line = scanner.nextLine();
                    log(line);
                    checkResult(line);
                }
            }
        }).start();
    }

    public void parseSHA(InputStream inputStream) {
        new Thread(() -> {
            Scanner scanner = new Scanner(inputStream, StandardCharsets.UTF_8);
            while (scanner.hasNextLine()) {
                synchronized (this) {
                    String line = scanner.nextLine();
                    if (Utility.canBeSHA256(line)) {
                        ProcessService.sha256Code = line;
                    }
                }
            }
        }).start();
    }

    public static void checkResult(String line) {
        String postFix = null;
        if (line.contains("benigns")) {
            postFix = Constants.benignPostFix;
        }
        else if (line.contains("malware")) {
            postFix = Constants.malwarePostFix;
        }
        if (postFix != null) {
            // is result
            String result1 = line.substring(line.indexOf('['), line.length());
            String[] listResult = result1.split(",");
            for (int i = 0; i < listResult.length; i++) {
                listResult[i] = listResult[i].replace("'", "").replace("[", "")
                .replace("]", "").replace(" ", "");
            }
            consumeName(listResult, postFix);
        }
    }

    public synchronized void log(String message) {
        if (Main.gui != null) {
            Main.gui.addLog(format.format(new Date()) + ": " + message, Color.BLUE, true);
        }
    }

    public static CommandService getInstance() {
        if (instance == null) {
            instance = new CommandService();
        }
        return instance;
    }

    public static void consumeName(String[] names, String postfix) {
        for (int i = 0; i < names.length; i++) {
            String newName = names[i];
            int dotIndex = newName.indexOf(".");
            if (dotIndex == -1) continue;
            newName = newName.substring(0, dotIndex);
            if (postfix.equals(Constants.benignPostFix)) {
                newName += names[i].substring(dotIndex);
            }
            File file = new File(Constants.watchPath + "/" + names[i]);
            if (!file.exists()) continue;
            File file2 = new File(Constants.watchPath + "/" + newName);
            boolean success = file.renameTo(file2);
            if (success) {
                if (Main.gui != null) {
                }
            } else {
                if (Main.gui != null) {
                    Main.gui.addLog("Change name failed: " + names[i]);
                }
            }
        }
    }
}
